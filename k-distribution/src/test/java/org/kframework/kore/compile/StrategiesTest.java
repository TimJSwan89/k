// Copyright (c) 2014-2016 K Team. All Rights Reserved.

package org.kframework.kore.compile;

import org.junit.Test;
import org.junit.rules.TestName;
import org.kframework.attributes.Source;
import org.kframework.builtin.BooleanUtils;
import org.kframework.builtin.KLabels;
import org.kframework.definition.Module;
import org.kframework.definition.Rule;
import org.kframework.kore.Assoc;
import org.kframework.kore.K;
import org.kframework.kore.KApply;
import org.kframework.kore.KLabel;
import org.kframework.kore.KORE;
import org.kframework.kore.Unapply;
import org.kframework.main.GlobalOptions;
import org.kframework.parser.ProductionReference;
import org.kframework.rewriter.Rewriter;
import org.kframework.rewriter.SearchType;
import org.kframework.unparser.AddBrackets;
import org.kframework.unparser.KOREToTreeNodes;
import org.kframework.utils.KoreUtils;
import org.kframework.utils.errorsystem.KExceptionManager;
import scala.Some;
import scala.Tuple2;

import java.io.File;
import java.io.IOException;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import static org.junit.Assert.*;

public class StrategiesTest {

    @org.junit.Rule
    public TestName name = new TestName();

    protected File testResource(String baseName) throws URISyntaxException {
        return new File(StrategiesTest.class.getResource(baseName).toURI());
    }

    @Test
    public void simple() throws IOException, URISyntaxException {
        String filename = "/compiler-tests/strategies.k";
        String mainModule = "A";
        String syntaxModule = "A";

        String pgm = "x";
        String expected = "<t> <k> zz </k> <s> false </s> </t>";

        assertSearch(filename, mainModule, syntaxModule, pgm, expected, "if ^xy ; ^xy then ^xy else ^xz ; ^zzz ; ^zzz");
    }

    @Test
    public void imp() throws IOException, URISyntaxException {
        String filename = "/compiler-tests/strategies_imp.k";
        String mainModule = "IMP";
        String syntaxModule = "IMP-SYNTAX";

        String pgm = "int s, n; n = 10; while(0<=n) { s = s + n; n = n + -1; }";
        String expected = "<generatedTop> <k> . </k> <state> s |-> 55 n |-> -1 </state> <s> true </s> </generatedTop>";

        assertSearch(filename, mainModule, syntaxModule, pgm, expected, "(^heat* ; ^regular ; (^cool || true))*"); //
    }

    private void assertSearch(String filename, String mainModule, String syntaxModule, String pgm, String expected, String strategies) throws URISyntaxException, IOException {
        KoreUtils utils = new KoreUtils(filename, mainModule, syntaxModule, true, KORE.Sort("Exp") ,true, true, new KExceptionManager(new GlobalOptions()));
        K kPgm = utils.getParsed(pgm, Source.apply("generated by " + getClass().getSimpleName()), strategies);

        Rewriter rewriter = utils.getRewriter();

        K res = rewriter.search(kPgm, Optional.empty(), Optional.empty(),
                new Rule(KORE.KVariable("X"), BooleanUtils.TRUE, BooleanUtils.TRUE, KORE.Att()),
                SearchType.FINAL, false);
        Some<Tuple2<KLabel, scala.collection.immutable.List<K>>> searchResults = Unapply.KApply$.MODULE$.unapply((KApply) res);
        Module unparsingModule = utils.getUnparsingModule();
        List<String> results = new ArrayList<>();
        if (searchResults.get() != null && searchResults.get()._1().equals(KORE.KLabel(KLabels.ML_OR))) {
            scala.collection.Seq<K> resultList = Assoc.flatten(KORE.KLabel(KLabels.ML_OR), searchResults.get()._2(), KORE.KLabel(KLabels.ML_FALSE));
            resultList.foreach(x -> {
                results.add(KOREToTreeNodes.toString(new AddBrackets(unparsingModule).addBrackets((ProductionReference) KOREToTreeNodes.apply(KOREToTreeNodes.up(unparsingModule, x), unparsingModule))));
                return null;
            });
        }


        String actual = results.stream().reduce("", (x, y) -> x.trim() + y);

        assertEquals("Execution failed", expected, actual);
    }
}
